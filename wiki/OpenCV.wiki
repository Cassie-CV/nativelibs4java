#summary Build instructions for OpenCV4Java

*in construction !!! please come back in a few days...*

= Introduction =

Taken from the [http://opencv.willowgarage.com/wiki/ OpenCV Wiki] : _OpenCV (Open Source Computer Vision) is a library of programming functions mainly aimed at real time computer vision._

= License = 

BSD-style : [http://opencvlibrary.svn.sourceforge.net/viewvc/opencvlibrary/trunk/opencv/doc/license.txt?view=markup OpenCV License]

= Downloads = 

Sources available from [http://sourceforge.net/projects/opencvlibrary/ OpenCV's SourceForge Project].

No Java wrappers are available for download yet (sneak preview : [http://ochafik.free.fr/Java/cv.jar cv.jar])

= Building =

Here's the script buildFatLibraries.sh, that create Fat binaries of OpenCV on Mac OS X :
{{{
export CONFFLAGS="--without-imageio --without-python --without-swig --disable-apps --disable-dependency-tracking --without-carbon --without-quicktime --enable-shared=no --without-gtk"

mkdir ppc
cd ppc
../../opencv/configure ${CONFFLAGS} --host=ppc-apple-darwin9
make clean
make CXXFLAGS="-arch ppc"
cd ..

mkdir i686
cd i686
../../opencv/configure ${CONFFLAGS} --host=i686-apple-darwin9
make clean
make CXXFLAGS="-arch i686"
cd ..

mkdir i386
cd i386
../../opencv/configure ${CONFFLAGS} --host=i386-apple-darwin9
make clean
make CXXFLAGS="-arch i386"
cd ..

# Taken from [http://ildan.blogspot.com/2008/07/creating-universal-static-opencv.html] :
mkdir armv6
cd armv6
../../opencv/configure ${CONFFLAGS} --host=arm-apple-darwin9 CXX=/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/arm-apple-darwin9-g++-4.0.1 CXXFLAGS="-arch armv6 -isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS2.0.sdk" CXXCPP=/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/cpp
make clean
make
cd ..

ARCHS="
	ppc
	i686
	i386
	armv6
"
LIBS="
	cv
	cxcore
	ml
	otherlibs/cvaux
	otherlibs/highgui
"
for lib in $LIBS ; do 
	libName=`echo $lib|sed 's/^.*\///'` 
	echo lipo -create `for arch in $ARCHS ; do echo "$arch/$lib/src/.libs/lib$libName.a " ; done` -output lib$libName.a ;
done

make -j 2
}}}

= JNAerator Config = 

{{{
-I	cv/include
-I	cvaux/include
-I	cxcore/include
-I	ml/include
-I	otherlibs/highgui/include

-library cxcore 
	cxcore/include/*.h
	
-library cv 
	cv/include/*.h
	
-library cvaux 
	cvaux/include/*.h
	
-library ml 
	ml/include/*.h
	
-library highgui 
	otherlibs/highgui/*.h

-entry OpenCV

-jar OpenCV.jar
}}}

= Quickstart = 

{{{
public class Test {
	public static void main(String[] args) {
		try {
			HighguiLibrary.IplImage img = HighguiLibrary.INSTANCE.cvLoadImage(args[0], CV_LOAD_IMAGE_UNCHANGED);
			HighguiLibrary.INSTANCE.cvNamedWindow("Example1", CV_WINDOW_AUTOSIZE);
			HighguiLibrary.INSTANCE.cvShowImage("Example1", new HighguiLibrary.CvArr(img));
			System.in.read();
			//HighguiLibrary.INSTANCE.cvWaitKey(0);
			CxcoreLibrary.INSTANCE.cvReleaseImage(new PointerByReference(img.getPointer(0)));
			HighguiLibrary.INSTANCE.cvDestroyWindow("Example1");
		} catch (Throwable th) {
			th.printStackTrace();
		}
	}
}
}}}