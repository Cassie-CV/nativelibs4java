#summary Java/Scala bindings for OpenCL (LGPL-licensed : commercial friendly)
#labels NativeLib
<wiki:toc max_depth="1" />

= Download / Try it ! =

<table cellpadding="15" border="1" width="80%">
<tr>
<td align="center"><font size="+2">[http://code.google.com/p/javacl JavaCL]</font><br/><br/>(natural and powerful Object-Oriented API for high-performance computing)
</td><td align="center">
<font size="+2">[http://code.google.com/p/scalacl ScalaCL]</font><br/><br/>(OpenCL DSL : write parallel expressions as you breathe)
</td><td align="center">
<font size="+2">OpenCL4Java</font><br/><br/>(raw C-style bindings that power JavaCL)
</td>
</tr><tr>
<td align="center">
[http://nativelibs4java.sourceforge.net/maven/com/nativelibs4java/javacl Download] |
[http://nativelibs4java.sourceforge.net/sites/javacl/apidocs JavaDoc]
<br/> <br/> 
<table width="90%">
<tr><td align="center">
[http://nativelibs4java.sourceforge.net/webstart/OpenCL/ParticlesDemo.jnlp http://nativelibs4java.googlecode.com/svn/wiki/JavaCLLemonParticles.PNG]
<br/>
[http://nativelibs4java.sourceforge.net/webstart/OpenCL/ParticlesDemo.jnlp Particles Demo]
</td><td align="center">
[http://nativelibs4java.sourceforge.net/webstart/OpenCL/HardwareReport.jnlp http://nativelibs4java.googlecode.com/svn/wiki/JavaCLHardwareReport.png]
<br/>
[http://nativelibs4java.sourceforge.net/webstart/OpenCL/HardwareReport.jnlp Hardware Report]
</td></tr>
</table>
</td><td align="center">
[http://nativelibs4java.sourceforge.net/maven/com/nativelibs4java/scalacl Download] |
[http://nativelibs4java.sourceforge.net/sites/scalacl/scaladocs ScalaDoc]
</td><td align="center">
[http://nativelibs4java.sourceforge.net/maven/com/nativelibs4java/opencl4java Download] |
[http://nativelibs4java.sourceforge.net/sites/opencl4java/apidocs JavaDoc]
</td>
</tr>
</table>

[Maven Use with Maven].

= Quick Start = 

Documentation :
  * [http://code.google.com/p/javacl/wiki/CallingOpenCLKernelsFromJava Calling OpenCL Kernels from Java]
  * [OpenCLContextPooling Introduction on OpenCL context pooling]
Related blog posts :
  * [http://www.pixelnerve.com/v/2009/10/30/opencl-4-java/ JavaCL from within Processing 1.0]
  * [http://bbboblog.blogspot.com/2009/10/gpgpu-mandelbrot-with-opencl-and-java.html GPGPU Mandelbrot with OpenCL and Java]
  * [http://www.flickr.com/photos/tator82/sets/72157622877517625/ JavaCL Gallery on Flickr]
  * [http://ochafik.free.fr/blog/?p=317 OpenCL4Java v1.0-beta-3 released]
  * [http://ochafik.free.fr/blog/?p=308 OpenCL4Java v1.0-beta-2 released]
  * [http://ochafik.free.fr/blog/?p=296 OpenCL4Java v1.0-beta-1 released]
  * [http://ochafik.free.fr/blog/?p=190 OpenCL4Java: Build high-performance OpenCL code with Java (and stay calm)]
  * [http://ochafik.free.fr/blog/?p=207 ScalaCL: Reap OpenCLâ€™s benefits without learning its syntax (Scala DSL for transparently parallel computations)]

Example code :
  * [http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/JavaCL/src/test/java/com/nativelibs4java/opencl/OpenCL4JavaBasicTest.java OpenCL4JavaBasicTest.java]
  * [http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/JavaCL/src/test/java/com/nativelibs4java/opencl/OpenCL4JavaBenchmarkTest.java OpenCL4JavaBenchmark.java]
  * [http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/Demos/src/main/java/com/nativelibs4java/opencl/demos/particles/ParticlesDemo.java ParticlesDemo.java] | [http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/Demos/src/main/opencl/com/nativelibs4java/opencl/demos/particles/ParticlesDemoProgram.c ParticlesDemoProgram.c]
  * [http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/ScalaCL/src/main/scala/scalacl/ScalaCLTest.scala ScalaCLTest.scala]

Mailing list :
  * [http://groups.google.fr/group/nativelibs4java/ NativeLibs4Java's Google Group]

= What is OpenCL4Java ? =

[http://www.khronos.org/opencl/ OpenCL] is the first open, royalty-free standard for cross-platform, parallel programming of modern processors and GPUs.

NativeLibs4Java provide three levels of Java bindings for OpenCL :
  * JavaCL : Thin [http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/target/site/apidocs/com/nativelibs4java/opencl/OpenCL4Java.html Object-Oriented wrappings] that hide away the complexity of the C-style wrappings and bring facilities in (array reduction support, OpenGL interop...)
  {{{
CLContext context = JavaCL.createBestContext();
CLProgram program = context.createProgram(myKernelSource).build();
CLKernel kernel = program.createKernel(
   	"myKernel", 
    	new float[] { u, v },
    	context.createIntBuffer(Usage.Input, inputBuffer, true),
    	context.createFloatBuffer(Usage.Output, resultsBuffer, false)
);
...
}}}
  [http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/JavaCL/src/test/java/com/nativelibs4java/opencl/OpenCL4JavaBasicTest.java See the complete example...]
  * [http://ochafik.free.fr/blog/?p=207 ScalaCL], which is a kind of "parallel expressions for dummies" in Scala
  {{{
class VectorAdd(i: Dim) extends Program(i) {
	val a = FloatsVar
	val b = FloatsVar
	var result = FloatsVar
	content = result := a + b
}
}}}
  [http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/ScalaCL/src/main/scala/scalacl/ScalaCLTest.scala See the complete exemple...]
  * OpenCL4Java [http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/target/site/apidocs/com/nativelibs4java/opencl/OpenCLLibrary.html C-style wrappings] auto-JNAerated by [http://jnaerator.googlecode.com/ JNAerator] (they use [http://jna.dev.java.net/ JNA] to make the glue with native code)
  {{{		
cl_device_id[] ids = new cl_device_id[nDevs];
OpenCLLibrary.INSTANCE.clGetDeviceIDs(null, CL_DEVICE_TYPE_GPU | CL_DEVICE_TYPE_CPU, nDevs, ids, pCount));
...
}}}

= Requirements =

  * Macintosh : [http://www.apple.com/macosx/ MacOS X 10.6 Snow Leopard] (CPU and/or any supported GPU)
  * Other systems : 
    * NVIDIA GPU : [http://www.nvidia.com/object/cuda_opencl.html beta OpenCL-enabled drivers]
    * ATI GPU or _any SSE3-capable CPU_ (Windows, Linux) : [http://developer.amd.com/GPU/ATISTREAMSDKBETAPROGRAM/Pages/default.aspx ATI's Stream SDK beta 4]

This has been successfully tested on :
  * MacOS X Snow Leopard
  * Windows + ATI Stream 2 beta 3 and 4 (32 bits)
  * Windows + NVidia beta drivers (versions 190.38 to 195.62)

= Build it... =

  * First, [http://maven.apache.org/download.html install Maven].
  * Then, install [http://kenai.com/projects/jogl/pages/Home JOGL 2.x] if you want automatic tests to pass. 
  _This is tricky_ : you need to extract *some* of the files from the [http://download.java.net/media/jogl/builds/nightly/ archive that matches your platform] to the extension directory of your JRE (jre6/lib/ext), but not all of them (otherwise JOGL will present you black screens without explanation).
  Typically, you'll need :
    * jogl.all.jar
    * gluegen-rt.jar
    * gluegen-rt.dll / .so / .dylib
    * nativewindow.all.jar
    * nativewindow_awt.dll / .so / .dylib
    * nativewindow_jvm.dll / .so / .dylib
  Yeah, that sucks (hope they'll make an up-to-date Maven repository available soon...).
  * Checkout [http://code.google.com/p/nativelibs4java/source/browse/#svn/trunk/libraries nativelibs4java files] :
    {{{
svn checkout http://nativelibs4java.googlecode.com/svn/trunk/libraries nativelibs4java
cd nativelibs4java
cd OpenCL
}}}
  * *Optional, not advised* : Regenerate the low-level bindings (you'll have to edit the autogenerated files after the generation to avoid regressions, use some SVN diff for that. The current SVN version was generated by bits on three platforms) :
    {{{
mvn com.jnaerator:maven-jnaerator-plugin:jnaerate
}}}
  * Compile and package OpenCL4Java/JavaCL/ScalaCL/Demos/BLAS in one command (Maven is not all bad) :
    {{{
mvn package
}}}
  (note that you can skip tests by appending "-Dmaven.test.skip=true" to that command line in case one test prevents you from creating the target JARs)

[http://nativelibs4java.sourceforge.net/webstart/OpenCL/ParticlesDemo.jnlp http://nativelibs4java.googlecode.com/svn/wiki/JavaCLDemo.png]