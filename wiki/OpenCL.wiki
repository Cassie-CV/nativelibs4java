#summary Java/Scala bindings for OpenCL
#labels NativeLib
<wiki:toc max_depth="1" />
<wiki:gadget url="http://jnaerator.googlecode.com/svn/wiki/adsense468x60.xml" border="0" width="468" height="60" />

= What is OpenCL4Java ? =

[http://www.khronos.org/opencl/ OpenCL] is the first open, royalty-free standard for cross-platform, parallel programming of modern processors and GPUs.

OpenCL4Java is a library that provides three levels of Java bindings for OpenCL :
  * [http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/target/site/apidocs/com/nativelibs4java/opencl/OpenCLLibrary.html C-style wrappings] made by [http://jnaerator.googlecode.com/ JNAerator]. 
  {{{		
IntByReference pCount = new IntByReference();
OpenCLLibrary.INSTANCE.clGetDeviceIDs(null, CL_DEVICE_TYPE_GPU | CL_DEVICE_TYPE_CPU, 0, (PointerByReference)null, pCount);
int nDevs = pCount.getValue();
cl_device_id[] ids = new cl_device_id[nDevs];
OpenCLLibrary.INSTANCE.clGetDeviceIDs(null, CL_DEVICE_TYPE_GPU | CL_DEVICE_TYPE_CPU, nDevs, ids, pCount));
...
}}}
  * Thin [http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/target/site/apidocs/com/nativelibs4java/opencl/OpenCL4Java.html Object-Oriented wrappings] that hide away the complexity of the C-style wrappings (not all features are available yet, though)
  {{{
CLContext context = CLContext.createContext(CLDevice.listAllDevices());
CLProgram program = context.createProgram(src).build();
CLKernel kernel = program.createKernel(
   	"square", 
    	context.createInput(data, false), 
    	context.createOutput(resultsf), 
    	context.createOutput(resultsi), 
    	dataSize
);
...
}}}
  [http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/src/main/java/com/nativelibs4java/opencl/OpenCL4JavaExample.java See the complete example...]
  * Scala DSL which is a kind of "[http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/src/main/scala/com/nativelibs4java/scalacl/ScalaCLTest.scala parallel expressions for dummies]"
  {{{
class MyProg(n: Int) extends Program {
	val a = IntsVar(n)
	val b = IntsVar(n)
	val d = IntVar()
	var o = DoublesVar(n)
	
	override var root: Expr =
	o ~ a + sin(b) * 0.7 + d;
}
var n = 1000;
var prog = new MyProg(n)
prog.a.set (1 to n)
prog.b.set prog.a
prog ! // run the operation
println prog.o // print the output
}}}
   Not ready yet : right now, the DSL is mostly ready and generates proper OpenCL source code, but it hasn't been plugged on the OpenCL OO-layer yet.

This has only been tested on [http://www.apple.com/fr/macosx/ MacOS X Snow Leopard], as this latter ships with a production-quality OpenCL implementation (NVIDIA gives early access to their OpenCL-enabled Windows drivers).

= Requirements =

  * Macintosh : [http://www.apple.com/macosx/ MacOS X 10.6 Snow Leopard] (CPU and/or any supported GPU)
  * Other systems : 
    * NVIDIA GPU : [http://www.nvidia.com/object/cuda_opencl.html early-access OpenCL-enabled drivers]
    * ATI GPU or _any SSE3-capable CPU_ (Windows, Linux) : [http://developer.amd.com/GPU/ATISTREAMSDKBETAPROGRAM/Pages/default.aspx ATI's Stream SDK] 

= Download it ! =

[http://nativelibs4java.googlecode.com/svn/trunk/maven-repo/com/nativelibs4java/opencl/OpenCL4Java/ Binaries in self-contained JAR] (OO wrappings, Scala DSL + raw bindings)

[http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/target/site/apidocs/index.html OpenCL4Java  Browse online Javadoc].

= Quick Start = 

Related blog posts :
  * [http://ochafik.free.fr/blog/?p=190 OpenCL4Java: Build high-performance OpenCL code with Java (and stay calm)]

Example code :
  * [http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/src/main/java/com/nativelibs4java/opencl/OpenCL4JavaExample.java OpenCL4JavaExample.java]
* [http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/src/main/java/com/nativelibs4java/opencl/OpenCL4JavaBenchmark.java OpenCL4JavaBenchmark.java]

= Build it... =

  * First, [http://maven.apache.org/download.html install Maven].
  * Checkout [http://code.google.com/p/nativelibs4java/source/browse/#svn/trunk/libraries nativelibs4java files] :
    {{{
svn checkout http://nativelibs4java.googlecode.com/svn/trunk/libraries nativelibs4java
cd nativelibs4java
cd OpenCL
}}}
  * *Optional* If you wish to regenerate the low-level bindings, download and launch JNAerator with the appropriate [*].jnaerator file ([http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/jnaerator/OpenCL.MacOSX.jnaerator OpenCL.MacOSX.jnaerator] or [http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/jnaerator/OpenCL.OtherPlatforms.jnaerator OpenCL.OtherPlatforms.jnaerator]) :
    {{{
wget http://ochafik.free.fr/Java/jnaerator.jar
java -jar jnaerator.jar jnaerator/OpenCL.jnaerator
}}}
  You'll get a neat [http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/jnaerator/OpenCL.jar OpenCL.jar library wrapper such as this one].
  * Compile and package OpenCL4Java :
    {{{
mvn package
mvn javadoc
}}}