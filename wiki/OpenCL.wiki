#summary Java/Scala bindings for OpenCL
#labels NativeLib
<wiki:toc max_depth="1" />
<wiki:gadget url="http://jnaerator.googlecode.com/svn/wiki/adsense468x60.xml" border="0" width="468" height="60" />

= Quick Start = 

Related blog posts :
  * [http://ochafik.free.fr/blog/?p=190 OpenCL4Java: Build high-performance OpenCL code with Java (and stay calm)]
  * [http://ochafik.free.fr/blog/?p=207 ScalaCL: Reap OpenCLâ€™s benefits without learning its syntax (Scala DSL for transparently parallel computations)]

Example code :
  * [http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/src/main/java/com/nativelibs4java/opencl/OpenCL4JavaExample.java OpenCL4JavaExample.java]
  * [http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/src/main/java/com/nativelibs4java/opencl/OpenCL4JavaBenchmark.java OpenCL4JavaBenchmark.java]
  * [http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/src/main/scala/scalacl/ScalaCLTest.scala ScalaCLTest.scala]

= What is OpenCL4Java ? =

[http://www.khronos.org/opencl/ OpenCL] is the first open, royalty-free standard for cross-platform, parallel programming of modern processors and GPUs.

OpenCL4Java is a library that provides three levels of Java bindings for OpenCL :
  * [http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/target/site/apidocs/com/nativelibs4java/opencl/OpenCLLibrary.html C-style wrappings] auto-JNAerated by [http://jnaerator.googlecode.com/ JNAerator] (they use [http://jna.dev.java.net/ JNA] to make the glue with native code)
  {{{		
cl_device_id[] ids = new cl_device_id[nDevs];
OpenCLLibrary.INSTANCE.clGetDeviceIDs(null, CL_DEVICE_TYPE_GPU | CL_DEVICE_TYPE_CPU, nDevs, ids, pCount));
...
}}}
  * Thin [http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/target/site/apidocs/com/nativelibs4java/opencl/OpenCL4Java.html Object-Oriented wrappings] that hide away the complexity of the C-style wrappings (not all features are available yet, though)
  {{{
CLContext context = CLContext.createContext(CLDevice.listAllDevices());
CLProgram program = context.createProgram(myKernelSource).build();
CLKernel kernel = program.createKernel(
   	"myKernel", 
    	context.createInput(data, false), 
    	context.createOutput(resultsBuffer), 
    	dataSize
);
...
}}}
  [http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/src/main/java/com/nativelibs4java/opencl/OpenCL4JavaExample.java See the complete example...]
  * [http://ochafik.free.fr/blog/?p=207 ScalaCL], which is a kind of "[http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/src/main/scala/scalacl/ScalaCLTest.scala parallel expressions for dummies]"
  {{{
class VectorAdd(i: Dim) extends Program(i) {
	val a = FloatsVar
	val b = FloatsVar
	var result = FloatsVar
	content = result := a + b
}
}}}

= Download it ! =

[http://nativelibs4java.googlecode.com/svn/trunk/maven-repo/com/nativelibs4java/opencl/OpenCL4Java/ Binaries in self-contained JAR] (OO wrappings, Scala DSL + raw bindings)

[http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/target/site/apidocs/index.html Browse OpenCL4Java's Javadoc online].

[Maven Use OpenCL4Java in a Maven project].

= Requirements =

  * Macintosh : [http://www.apple.com/macosx/ MacOS X 10.6 Snow Leopard] (CPU and/or any supported GPU)
  * Other systems : 
    * NVIDIA GPU : [http://www.nvidia.com/object/cuda_opencl.html early-access OpenCL-enabled drivers]
    * ATI GPU or _any SSE3-capable CPU_ (Windows, Linux) : [http://developer.amd.com/GPU/ATISTREAMSDKBETAPROGRAM/Pages/default.aspx ATI's Stream SDK] 

This has only been tested on [http://www.apple.com/fr/macosx/ MacOS X Snow Leopard], as this latter ships with a production-quality OpenCL implementation (NVIDIA gives early access to their OpenCL-enabled Windows drivers).

= Build it... =

  * First, [http://maven.apache.org/download.html install Maven].
  * Checkout [http://code.google.com/p/nativelibs4java/source/browse/#svn/trunk/libraries nativelibs4java files] :
    {{{
svn checkout http://nativelibs4java.googlecode.com/svn/trunk/libraries nativelibs4java
cd nativelibs4java
cd OpenCL
}}}
  * *Optional* If you wish to regenerate the low-level bindings, download and launch JNAerator with the appropriate [*].jnaerator file ([http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/jnaerator/OpenCL.MacOSX.jnaerator OpenCL.MacOSX.jnaerator] or [http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCL/jnaerator/OpenCL.OtherPlatforms.jnaerator OpenCL.OtherPlatforms.jnaerator]) :
    {{{
wget http://ochafik.free.fr/Java/jnaerator.jar
java -jar jnaerator.jar jnaerator/OpenCL.jnaerator
}}}
  You'll get a neat [http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/jnaerator/OpenCL.jar OpenCL.jar library wrapper such as this one].
  * Compile and package OpenCL4Java :
    {{{
mvn package
mvn javadoc
}}}