#summary Java bindings for OpenCL
#labels NativeLib

<wiki:gadget url="http://jnaerator.googlecode.com/svn/wiki/adsense468x60.xml" border="0" width="468" height="60" />

= Open Computing Language 4 Java ? =

[http://www.khronos.org/opencl/ OpenCL] is a the first open, royalty-free standard for cross-platform, parallel programming of modern processors and GPUs.

NativeLibs4Java provides three levels of Java bindings for OpenCL :
  * C-style wrappings made by [http://jnaerator.googlecode.com/ JNAerator]. 
  {{{		
IntByReference pCount = new IntByReference();
OpenCLLibrary.INSTANCE.clGetDeviceIDs(null, CL_DEVICE_TYPE_GPU | CL_DEVICE_TYPE_CPU, 0, (PointerByReference)null, pCount);
int nDevs = pCount.getValue();
cl_device_id[] ids = new cl_device_id[nDevs];
OpenCLLibrary.INSTANCE.clGetDeviceIDs(null, CL_DEVICE_TYPE_GPU | CL_DEVICE_TYPE_CPU, nDevs, ids, pCount));
...
}}}
  * Java-style wrappings that hides away the complexity of the C-style wrappings (not all features are available yet, though)
  {{{
CLContext context = CLContext.createContext(CLDevice.listAllDevices());
CLProgram program = context.createProgram(src).build();
CLKernel kernel = program.createKernel(
   	"square", 
    	context.createInput(data, false), 
    	context.createOutput(resultsf), 
    	context.createOutput(resultsi), 
    	dataSize
);
...
}}}
  * Scala DSL which is a kind of "[http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/src/main/scala/com/nativelibs4java/scalacl/ScalaCLTest.scala parallel expressions for dummies]"
  {{{
class MyProg(n: Int) extends Program {
	val a = IntsVar(n)
	val b = IntsVar(n)
	val d = IntVar()
	var o = DoublesVar(n)
	
	override var root: Expr =
	o ~ a + sin(b) * 0.7 + d;
}
var n = 1000;
var prog = new MyProg(n)
prog.a.set (1 to n)
prog.b.set prog.a
prog ! // run the operation
println prog.o // print the output
}}}

This has only been tested on [http://www.apple.com/fr/macosx/ MacOS X Snow Leopard], as this latter ships with a production-quality OpenCL implementation (NVIDIA gives early access to their OpenCL-enabled Windows drivers).

= Downloads =

  * OO wrappings, Scala DSL + raw bindings : [http://nativelibs4java.googlecode.com/svn/trunk/maven-repo/com/nativelibs4java/opencl/OpenCL4Java/ download from here]

  * C-style raw bindings alone : [http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/jnaerator/OpenCL.jar OpenCL.jar]

You can also browse the [http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/target/site/apidocs/index.html OpenCL4Java  Javadoc].

= Building =

First, checkout [http://code.google.com/p/nativelibs4java/source/browse/#svn/trunk/libraries/OpenCL OpenCL's project file from nativelibs4java] :
{{{
svn checkout http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/ OpenCL
}}}

Go to the `OpenCL/jnaerator` directory and download JNAerator :
{{{
wget http://ochafik.free.fr/Java/jnaerator.jar
}}}

Then launch JNAerator :
{{{
java -jar jnaerator.jar OpenCL.jnaerator
}}}

You'll get a neat [http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/jnaerator/OpenCL.jar OpenCL.jar library wrapper such as this one].

You can even generate [http://nativelibs4java.googlecode.com/svn/trunk/libraries/OpenCL/doc/index.html the Javadoc] :
{{{
java -jar jnaerator.jar -library OpenCL CL/cl.h -noComp
javadoc -classpath jnaerator.jar -d ../doc opencl/*.java -link https://jna.dev.java.net/javadoc opencl/*.java
}}}