Index: /Users/ochafik/src/dyncall/dyncall/dyncall/dyncall_call_x86_masm.asm
===================================================================
--- /Users/ochafik/src/dyncall/dyncall/dyncall/dyncall_call_x86_masm.asm	(revision 559)
+++ /Users/ochafik/src/dyncall/dyncall/dyncall/dyncall_call_x86_masm.asm	(working copy)
@@ -33,7 +33,7 @@
 
 
 ; Main dyncall call.
-_dcCall_x86_cdecl PROC EXPORT
+_dcCall_x86_cdecl PROC
 
     OPTION PROLOGUE:NONE, EPILOGUE:NONE
 
@@ -71,7 +71,7 @@
 _dcCall_x86_cdecl ENDP
 
 
-_dcCall_x86_win32_msthis PROC EXPORT
+_dcCall_x86_win32_msthis PROC ; EXPORT
 
     OPTION PROLOGUE:NONE, EPILOGUE:NONE
 
@@ -114,7 +114,7 @@
 _dcCall_x86_win32_msthis ENDP
 
 
-_dcCall_x86_win32_std PROC EXPORT
+_dcCall_x86_win32_std PROC ; EXPORT
 
     OPTION PROLOGUE:NONE, EPILOGUE:NONE
 
@@ -151,7 +151,7 @@
 _dcCall_x86_win32_std ENDP
 
 
-_dcCall_x86_win32_fast PROC EXPORT
+_dcCall_x86_win32_fast PROC ; EXPORT
 
     OPTION PROLOGUE:NONE, EPILOGUE:NONE
 
Index: /Users/ochafik/src/dyncall/dyncall/dyncall/dyncall_call_x64_masm.asm
===================================================================
--- /Users/ochafik/src/dyncall/dyncall/dyncall/dyncall_call_x64_masm.asm	(revision 559)
+++ /Users/ochafik/src/dyncall/dyncall/dyncall/dyncall_call_x64_masm.asm	(working copy)
@@ -31,7 +31,7 @@
 
 
 ; Main dyncall call.
-dcCall_x64_win64 PROC EXPORT
+dcCall_x64_win64 PROC
 
 	OPTION PROLOGUE:NONE, EPILOGUE:NONE
 
Index: /Users/ochafik/src/dyncall/dyncall/dynload/dynload_syms_pe32.c
===================================================================
--- /Users/ochafik/src/dyncall/dyncall/dynload/dynload_syms_pe32.c	(revision 559)
+++ /Users/ochafik/src/dyncall/dyncall/dynload/dynload_syms_pe32.c	(working copy)
@@ -20,6 +20,7 @@
 #include "dynload.h"
 
 #include <windows.h>
+#include <Dbghelp.h>
 
 struct DLLib_
 {
@@ -28,6 +29,7 @@
 
 struct DLSyms_
 {
+  DLLib* pLib;
   const char* pBase;
   ptrdiff_t* pNames;
   ptrdiff_t* pFuncs;
@@ -46,15 +48,19 @@
   IMAGE_NT_HEADERS*       pNTHeader       = (IMAGE_NT_HEADERS*) ( ptr + pDOSHeader->e_lfanew );  
   IMAGE_DATA_DIRECTORY*   pExportsDataDir = &pNTHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT];
   IMAGE_EXPORT_DIRECTORY* pExports        = (IMAGE_EXPORT_DIRECTORY*) (ptr + pExportsDataDir->VirtualAddress);  
+  
   pResolver->pBase  = ptr;
   pResolver->pNames = (ptrdiff_t*) ( ptr + ( (ptrdiff_t)pExports->AddressOfNames) );
   pResolver->pFuncs = (ptrdiff_t*) ( ptr+( (ptrdiff_t) pExports->AddressOfFunctions) );
   pResolver->count  = (size_t)       pExports->NumberOfNames;
+  pResolver->pLib   = pLib;
+  SymSetOptions(SYMOPT_UNDNAME | SYMOPT_DEFERRED_LOADS);
+  SymInitialize((HANDLE)pLib, NULL, TRUE);
 }
 
 void dlSymsCleanup(DLSyms* pResolver)
 {
-  /* do nothing. */
+    SymCleanup((HANDLE)pResolver->pLib);
 }
 
 int dlSymsCount(DLSyms* pResolver)
@@ -67,7 +73,7 @@
   IMAGE_EXPORT_DIRECTORY* pExports        = (IMAGE_EXPORT_DIRECTORY*) (ptr + pExportsDataDir->VirtualAddress);  
   return pExports->NumberOfNames;
 */
-  return pResolver->count;
+  return (int)pResolver->count;
 }
 
 const char* dlSymsName(DLSyms* pResolver, int index)
Index: /Users/ochafik/src/dyncall/dyncall/dynload/dynload_darwin.c
===================================================================
--- /Users/ochafik/src/dyncall/dyncall/dynload/dynload_darwin.c	(revision 0)
+++ /Users/ochafik/src/dyncall/dyncall/dynload/dynload_darwin.c	(revision 0)
@@ -0,0 +1,71 @@
+/*
+
+ Copyright (c) 2007-2009 Olivier Chafik <olivier.chafik@gmail.com>
+
+ Permission to use, copy, modify, and distribute this software for any
+ purpose with or without fee is hereby granted, provided that the above
+ copyright notice and this permission notice appear in all copies.
+
+ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+
+*/
+
+/*
+
+  dynload_darwin.c
+
+  dynload module for .dylib (mach-o darwin/OS X) files
+
+*/
+
+
+#include "dynload.h"
+
+#include <dlfcn.h>
+
+struct DLLib_
+{
+	char* libPath;
+	void* handle;
+};
+
+DLLib* dlLoadLibrary(const char* libPath)
+{
+	void* handle;
+	size_t len;
+	DLLib* lib;
+	
+	handle = dlopen(libPath, RTLD_LAZY);
+	if (!handle)
+		return NULL;
+	
+	len = strlen(libPath);
+	lib = (DLLib*)malloc(sizeof(DLLib));
+	lib->libPath = (char*)malloc(len + 1);
+	strcpy(lib->libPath, libPath);
+	lib->libPath[len] = '\0';
+	lib->handle = handle;
+	return lib;
+}
+
+void* dlFindSymbol(DLLib* libHandle, const char* symbol)
+{
+  return dlsym(libHandle && libHandle->handle ? libHandle->handle : RTLD_DEFAULT, symbol);
+}
+
+void  dlFreeLibrary(DLLib* libHandle)
+{
+	if (!libHandle)
+		return;
+	
+	dlclose(libHandle->handle);
+	free(libHandle->libPath);
+	free(libHandle);
+}
+
Index: /Users/ochafik/src/dyncall/dyncall/dynload/dynload.h
===================================================================
--- /Users/ochafik/src/dyncall/dyncall/dynload/dynload.h	(revision 559)
+++ /Users/ochafik/src/dyncall/dyncall/dynload/dynload.h	(working copy)
@@ -61,6 +61,7 @@
 int         dlSymsCount  (DLSyms* pSyms);
 const char* dlSymsName   (DLSyms* pSyms, int index);
 void*       dlSymsValue  (DLSyms* pSyms, int index);
+const char* dlSymsNameFromValue(DLSyms* pSyms, void* value);
 
 #ifdef __cplusplus
 }
Index: /Users/ochafik/src/dyncall/dyncall/dynload/dynload_syms.c
===================================================================
--- /Users/ochafik/src/dyncall/dyncall/dynload/dynload_syms.c	(revision 559)
+++ /Users/ochafik/src/dyncall/dyncall/dynload/dynload_syms.c	(working copy)
@@ -23,11 +23,10 @@
 # include "dynload_syms_pe32.c"
 #elif defined(DC_UNIX)
 # if defined (DC__OS_Darwin)
-void dummy() { }
+# include "dynload_syms_darwin.c"
 # else
 # include "dynload_syms_elf.c"
 # endif
 #else
 void dummy() { }
 #endif
-
Index: /Users/ochafik/src/dyncall/dyncall/dynload/dynload_syms_darwin.c
===================================================================
--- /Users/ochafik/src/dyncall/dyncall/dynload/dynload_syms_darwin.c	(revision 0)
+++ /Users/ochafik/src/dyncall/dyncall/dynload/dynload_syms_darwin.c	(revision 0)
@@ -0,0 +1,106 @@
+/*
+
+ Copyright (c) 2007-2009 Olivier Chafik <olivier.chafik@gmail.com>
+
+ Permission to use, copy, modify, and distribute this software for any
+ purpose with or without fee is hereby granted, provided that the above
+ copyright notice and this permission notice appear in all copies.
+
+ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+
+*/
+
+/*
+ 
+ dynamic symbol resolver for Mach-O
+
+ */
+
+#include "dynload.h"
+#include "dynload_macros.h"
+#include <mach-o/dyld.h>
+#include <stdio.h>
+
+#include <dlfcn.h>
+
+void dummy() { }
+
+struct DLLib_
+{
+	char* libPath;
+	void* handle;
+};
+
+struct DLSyms_
+{
+	DLLib* pLib;
+	NSObjectFileImage pObjectFileImage;
+};
+
+size_t dlSyms_sizeof()
+{
+  return sizeof(DLSyms);
+}
+void dlSymsInit(DLSyms* pSyms, DLLib* pLib)
+{
+	int ret;
+	//const char* path = "/Users/ochafik/nativelibs4java/Runtime/BridJ/src/test/resources/darwin_universal/libtest.dylib";
+	pSyms->pLib = pLib;
+
+	ret = NSCreateObjectFileImageFromFile(
+		pLib->libPath, 
+		&pSyms->pObjectFileImage
+	);
+	if (ret != NSObjectFileImageSuccess)
+		pSyms->pObjectFileImage = 0;
+}
+
+void dlSymsCleanup(DLSyms* pSyms)
+{
+	if (pSyms->pObjectFileImage)
+		NSDestroyObjectFileImage(pSyms->pObjectFileImage);
+}
+
+int dlSymsCount(DLSyms* pSyms)
+{
+	if (!pSyms->pObjectFileImage)
+		return 0;
+	return NSSymbolDefinitionCountInObjectFileImage(pSyms->pObjectFileImage);
+}
+
+const char* dlSymsName(DLSyms* pSyms, int index)
+{
+	if (!pSyms->pObjectFileImage)
+		return NULL;
+	return NSSymbolDefinitionNameInObjectFileImage(pSyms->pObjectFileImage, index);
+}
+
+void* dlSymsValue(DLSyms* pSyms, int index)
+{
+	const char* name = dlSymsName(pSyms, index);
+	if (!name)
+		return NULL;
+	return dlFindSymbol(pSyms->pLib, name);
+}
+/*void* dlSymsNameValue(DLSyms* pSyms, int index, const char** nameOut) {
+	if (!pSyms->pObjectFileImage)
+		return false;
+	
+	*nameOut = NSSymbolDefinitionNameInObjectFileImage(pSyms->pObjectFileImage, index);
+	return *nameOut ? dlFindSymbol(pSyms->pLib, *nameOut) : NULL;
+}*/
+
+const char* dlSymsNameFromValue(DLSyms* pSyms, void* value)
+{
+  Dl_info info;
+  if (dladdr(value, &info) && (value == info.dli_saddr))
+    return info.dli_sname;
+  return NULL;
+}
+
Index: /Users/ochafik/src/dyncall/dyncall/dynload/dynload.c
===================================================================
--- /Users/ochafik/src/dyncall/dyncall/dynload/dynload.c	(revision 559)
+++ /Users/ochafik/src/dyncall/dyncall/dynload/dynload.c	(working copy)
@@ -21,6 +21,10 @@
 #if defined(DC_WINDOWS)
 #include "dynload_win32.c"
 #elif defined(DC_UNIX)
-#include "dynload_unix.c"
+# if defined (DC__OS_Darwin)
+# include "dynload_darwin.c"
+# else
+# include "dynload_unix.c"
+# endif
 #endif
 
Index: /Users/ochafik/src/dyncall/dyncall/dynload/dynload_syms_elf.c
===================================================================
--- /Users/ochafik/src/dyncall/dyncall/dynload/dynload_syms_elf.c	(revision 559)
+++ /Users/ochafik/src/dyncall/dyncall/dynload/dynload_syms_elf.c	(working copy)
@@ -388,3 +388,11 @@
 }
 #endif
 
+const char* dlSymsNameFromValue(DLSyms* pSyms, void* value)
+{
+  Dl_info info;
+  if (dladdr(value, &info) && (value == info.dli_saddr))
+    return info.dli_fname;
+  return NULL;
+}
+
Index: /Users/ochafik/src/dyncall/dyncall/dynload/dynload_unix.c
===================================================================
--- /Users/ochafik/src/dyncall/dyncall/dynload/dynload_unix.c	(revision 559)
+++ /Users/ochafik/src/dyncall/dyncall/dynload/dynload_unix.c	(working copy)
@@ -37,11 +37,10 @@
 
 void* dlFindSymbol(DLLib* libHandle, const char* symbol)
 {
-  return dlsym( (void*) libHandle, symbol);
+  return dlsym(libHandle ? libHandle : RTLD_DEFAULT, symbol);
 }
 
 void  dlFreeLibrary(DLLib* libHandle)
 {
   dlclose( (void*) libHandle);
 }
-
Index: /Users/ochafik/src/dyncall/dyncall/dyncallback/dyncall_callback_x64_masm.asm
===================================================================
--- /Users/ochafik/src/dyncall/dyncall/dyncallback/dyncall_callback_x64_masm.asm	(revision 559)
+++ /Users/ochafik/src/dyncall/dyncall/dyncallback/dyncall_callback_x64_masm.asm	(working copy)
@@ -45,7 +45,7 @@
 DCCallback_size =   40
 
 
-dcCallbackThunkEntry PROC EXPORT
+dcCallbackThunkEntry PROC
 
   OPTION PROLOGUE:NONE, EPILOGUE:NONE
 
Index: /Users/ochafik/src/dyncall/dyncall/dyncallback/dyncall_callback_x86_masm.asm
===================================================================
--- /Users/ochafik/src/dyncall/dyncall/dyncallback/dyncall_callback_x86_masm.asm	(revision 559)
+++ /Users/ochafik/src/dyncall/dyncall/dyncallback/dyncall_callback_x86_masm.asm	(working copy)
@@ -49,7 +49,7 @@
 frame_DCArgs      = -24
 frame_DCValue     = -32
 
-_dcCallbackThunkEntry PROC EXPORT
+_dcCallbackThunkEntry PROC
 
   OPTION PROLOGUE:NONE, EPILOGUE:NONE
 
Index: /Users/ochafik/src/dyncall/dyncall/dyncallback/GNUmakefile
===================================================================
--- /Users/ochafik/src/dyncall/dyncall/dyncallback/GNUmakefile	(revision 559)
+++ /Users/ochafik/src/dyncall/dyncall/dyncallback/GNUmakefile	(working copy)
@@ -60,6 +60,7 @@
 UNITS += dyncall_callback_x86_masm
 endif
 ifdef BUILD_ARCH_x64
+UNITS += dyncall_callback_x64
 UNITS += dyncall_callback_x64_masm
 endif
 endif
Index: /Users/ochafik/src/dyncall/dyncall/dyncallback/dyncall_callback_ppc32.c
===================================================================
--- /Users/ochafik/src/dyncall/dyncall/dyncallback/dyncall_callback_ppc32.c	(revision 559)
+++ /Users/ochafik/src/dyncall/dyncall/dyncallback/dyncall_callback_ppc32.c	(working copy)
@@ -48,6 +48,6 @@
 
 void dcbFreeCallback(DCCallback* pcb)
 {
-  dcbFreeWX(pcb, sizeof(DCCallback));
+  dcFreeWX(pcb, sizeof(DCCallback));
 }
 
