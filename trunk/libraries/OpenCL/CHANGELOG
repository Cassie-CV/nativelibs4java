Current development version (1.0-SNAPSHOT)

- Added CLContext/CLDevice.isDoubleSupported, isHalfSupported, isByteAddressableStoreSupported
- Added If function to ScalaCL (operates on statements or on expressions)
- Added CLAbstractEntity.release()
- Fixed Issue #4  : CLContext.createContext(CLDevice... devices) created context on only one device

Version 1.0-beta-2

- JAR is now self-sufficient (includes JNA + JNAerator's runtime classes)
- Added CLKernel.setLocalArg(argIndex, localArgByteLength)
- Allow localWorkSizes to be null in enqueueNDRange
- Added support for barriers and markers in CLQueue
- Fixed issue #2 : enqueueNDRange does not work for nDim > 1
- Added CLDevice.getMaxWorkItemSizes()
- CLDevice.toString() now only prints the name
- Moved method createContext from CLContext to CLPlatform
- Added all the CL_DEVICE_PREFERRED_VECTOR_WIDTH_XXX infos to CLDevice as getPreferredVectorWithXXX()
- Changed return type of getExtensions() method of both CLPlatform and CLDevice from String to String[]
- Added com.nativelibs4java.opencl.HardwareReport (with main method) : outputs html report with devices stats
- Rationalized naming of all enums : CL_ENTITY_ATTRIBUTE_SOME_VALUE = CLEntity.Attribute.SomeValue (enum item SomeValue in enum Attribute in class CLEntity)
- Added full support of images :
	- CLContext.getSupportedImageFormats + CLImageFormat and associated enums
	- CLImage2D, CLImage3D and corresponding creation methods in CLContext + all image info getters
- CLMem is now an abstract base class 
	- CLBuffer with typed subclasses (CLByteBuffer, CLIntBuffer..)
	- To create a CLBuffer : context.createIntBuffer(Input, size)
	- Added CLBuffer.copyTo (clEnqueueCopyBuffer)
	- Each typed CLBuffer subclass has map, mapLater, read methods that return typed NIO buffers
- Added full typing of OpenCL Exceptions (now possible to selectively catch a CLException.OutOfHostMemory, for instance)
- Added hashCode and equals method to most classes
- Added ability to create out of order queues and change queue properties after creation

Version 1.0-beta-1

- New CLPlatform class (~ OpenCL implementation) which now hosts the list*Devices(...) methods 
- Entry point of library is now OpenCL4Java.listPlatforms() 
- New CLEvent class, returned by all enqueue* methods (with methods waitFor, invokeUponCompletion...) 
- Better separation between blocking and non blocking calls 
- New CLSampler class supported as argument of CLKernel 
- Many info getters with typesafe enums / enum sets in classes CLDevice, CLPlatform, CLKernel... 
- Much more complete JavaDoc : http://nativelibs4java.sourceforge.net/sites/OpenCL4Java/apidocs/ 
- Example & benchmark classes became JUnit tests and moved here : http://code.google.com/p/nativelibs4java/source/browse/#svn/trunk/lib... 

While this release is rather OpenCL4Java-focused, ScalaCL also got its bunch of enhancements : 
- Added scalar variables IntVar, FloatVar, ShortVar... 
- 'local' keyword can be added to variables so they're local to the programs : val x = FloatVar local 
- Added many OpenCL math functions 
- Added methods ArrayVar.write(Range), ArrayVar.write(Seq) 
- Various bugfixes 

